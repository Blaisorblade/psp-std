package psp
package std
package jvm

abstract class JvmOpcodes {
  final val NOP             = 0
  final val ACONST_NULL     = 1
  final val ICONST_M1       = 2
  final val ICONST_0        = 3
  final val ICONST_1        = 4
  final val ICONST_2        = 5
  final val ICONST_3        = 6
  final val ICONST_4        = 7
  final val ICONST_5        = 8
  final val LCONST_0        = 9
  final val LCONST_1        = 10
  final val FCONST_0        = 11
  final val FCONST_1        = 12
  final val FCONST_2        = 13
  final val DCONST_0        = 14
  final val DCONST_1        = 15
  final val BIPUSH          = 16
  final val SIPUSH          = 17
  final val LDC             = 18
  final val LDC_W           = 19
  final val LDC2_W          = 20
  final val ILOAD           = 21
  final val LLOAD           = 22
  final val FLOAD           = 23
  final val DLOAD           = 24
  final val ALOAD           = 25
  final val ILOAD_0         = 26
  final val ILOAD_1         = 27
  final val ILOAD_2         = 28
  final val ILOAD_3         = 29
  final val LLOAD_0         = 30
  final val LLOAD_1         = 31
  final val LLOAD_2         = 32
  final val LLOAD_3         = 33
  final val FLOAD_0         = 34
  final val FLOAD_1         = 35
  final val FLOAD_2         = 36
  final val FLOAD_3         = 37
  final val DLOAD_0         = 38
  final val DLOAD_1         = 39
  final val DLOAD_2         = 40
  final val DLOAD_3         = 41
  final val ALOAD_0         = 42
  final val ALOAD_1         = 43
  final val ALOAD_2         = 44
  final val ALOAD_3         = 45
  final val IALOAD          = 46
  final val LALOAD          = 47
  final val FALOAD          = 48
  final val DALOAD          = 49
  final val AALOAD          = 50
  final val BALOAD          = 51
  final val CALOAD          = 52
  final val SALOAD          = 53
  final val ISTORE          = 54
  final val LSTORE          = 55
  final val FSTORE          = 56
  final val DSTORE          = 57
  final val ASTORE          = 58
  final val ISTORE_0        = 59
  final val ISTORE_1        = 60
  final val ISTORE_2        = 61
  final val ISTORE_3        = 62
  final val LSTORE_0        = 63
  final val LSTORE_1        = 64
  final val LSTORE_2        = 65
  final val LSTORE_3        = 66
  final val FSTORE_0        = 67
  final val FSTORE_1        = 68
  final val FSTORE_2        = 69
  final val FSTORE_3        = 70
  final val DSTORE_0        = 71
  final val DSTORE_1        = 72
  final val DSTORE_2        = 73
  final val DSTORE_3        = 74
  final val ASTORE_0        = 75
  final val ASTORE_1        = 76
  final val ASTORE_2        = 77
  final val ASTORE_3        = 78
  final val IASTORE         = 79
  final val LASTORE         = 80
  final val FASTORE         = 81
  final val DASTORE         = 82
  final val AASTORE         = 83
  final val BASTORE         = 84
  final val CASTORE         = 85
  final val SASTORE         = 86
  final val POP             = 87
  final val POP2            = 88
  final val DUP             = 89
  final val DUP_X1          = 90
  final val DUP_X2          = 91
  final val DUP2            = 92
  final val DUP2_X1         = 93
  final val DUP2_X2         = 94
  final val SWAP            = 95
  final val IADD            = 96
  final val LADD            = 97
  final val FADD            = 98
  final val DADD            = 99
  final val ISUB            = 100
  final val LSUB            = 101
  final val FSUB            = 102
  final val DSUB            = 103
  final val IMUL            = 104
  final val LMUL            = 105
  final val FMUL            = 106
  final val DMUL            = 107
  final val IDIV            = 108
  final val LDIV            = 109
  final val FDIV            = 110
  final val DDIV            = 111
  final val IREM            = 112
  final val LREM            = 113
  final val FREM            = 114
  final val DREM            = 115
  final val INEG            = 116
  final val LNEG            = 117
  final val FNEG            = 118
  final val DNEG            = 119
  final val ISHL            = 120
  final val LSHL            = 121
  final val ISHR            = 122
  final val LSHR            = 123
  final val IUSHR           = 124
  final val LUSHR           = 125
  final val IAND            = 126
  final val LAND            = 127
  final val IOR             = 128
  final val LOR             = 129
  final val IXOR            = 130
  final val LXOR            = 131
  final val IINC            = 132
  final val I2L             = 133
  final val I2F             = 134
  final val I2D             = 135
  final val L2I             = 136
  final val L2F             = 137
  final val L2D             = 138
  final val F2I             = 139
  final val F2L             = 140
  final val F2D             = 141
  final val D2I             = 142
  final val D2L             = 143
  final val D2F             = 144
  final val I2B             = 145
  final val I2C             = 146
  final val I2S             = 147
  final val LCMP            = 148
  final val FCMPL           = 149
  final val FCMPG           = 150
  final val DCMPL           = 151
  final val DCMPG           = 152
  final val IFEQ            = 153
  final val IFNE            = 154
  final val IFLT            = 155
  final val IFGE            = 156
  final val IFGT            = 157
  final val IFLE            = 158
  final val IF_ICMPEQ       = 159
  final val IF_ICMPNE       = 160
  final val IF_ICMPLT       = 161
  final val IF_ICMPGE       = 162
  final val IF_ICMPGT       = 163
  final val IF_ICMPLE       = 164
  final val IF_ACMPEQ       = 165
  final val IF_ACMPNE       = 166
  final val GOTO            = 167
  final val JSR             = 168
  final val RET             = 169
  final val TABLESWITCH     = 170
  final val LOOKUPSWITCH    = 171
  final val IRETURN         = 172
  final val LRETURN         = 173
  final val FRETURN         = 174
  final val DRETURN         = 175
  final val ARETURN         = 176
  final val RETURN          = 177
  final val GETSTATIC       = 178
  final val PUTSTATIC       = 179
  final val GETFIELD        = 180
  final val PUTFIELD        = 181
  final val INVOKEVIRTUAL   = 182
  final val INVOKESPECIAL   = 183
  final val INVOKESTATIC    = 184
  final val INVOKEINTERFACE = 185
  final val INVOKEDYNAMIC   = 186
  final val NEW             = 187
  final val NEWARRAY        = 188
  final val ANEWARRAY       = 189
  final val ARRAYLENGTH     = 190
  final val ATHROW          = 191
  final val CHECKCAST       = 192
  final val INSTANCEOF      = 193
  final val MONITORENTER    = 194
  final val MONITOREXIT     = 195
  final val WIDE            = 196
  final val MULTIANEWARRAY  = 197
  final val IFNULL          = 198
  final val IFNONNULL       = 199
  final val GOTO_W          = 200
  final val JSR_W           = 201

  // Instruction types
  final val NOARG_INSN       = 0
  final val SBYTE_INSN       = 1
  final val SHORT_INSN       = 2
  final val VAR_INSN         = 3
  final val IMPLVAR_INSN     = 4
  final val TYPE_INSN        = 5
  final val FIELDORMETH_INSN = 6
  final val ITFMETH_INSN     = 7
  final val INDYMETH_INSN    = 8
  final val LABEL_INSN       = 9
  final val LABELW_INSN      = 10
  final val LDC_INSN         = 11
  final val LDCW_INSN        = 12
  final val IINC_INSN        = 13
  final val TABL_INSN        = 14
  final val LOOK_INSN        = 15
  final val MANA_INSN        = 16
  final val WIDE_INSN        = 17

  def opcodeName(code: Int) = (code: @switch) match {
    case NOP             => "nop"
    case ACONST_NULL     => "aconst_null"
    case ICONST_M1       => "iconst_m1"
    case ICONST_0        => "iconst_0"
    case ICONST_1        => "iconst_1"
    case ICONST_2        => "iconst_2"
    case ICONST_3        => "iconst_3"
    case ICONST_4        => "iconst_4"
    case ICONST_5        => "iconst_5"
    case LCONST_0        => "lconst_0"
    case LCONST_1        => "lconst_1"
    case FCONST_0        => "fconst_0"
    case FCONST_1        => "fconst_1"
    case FCONST_2        => "fconst_2"
    case DCONST_0        => "dconst_0"
    case DCONST_1        => "dconst_1"
    case BIPUSH          => "bipush"
    case SIPUSH          => "sipush"
    case LDC             => "ldc"
    case LDC_W           => "ldc_w"
    case LDC2_W          => "ldc2_w"
    case ILOAD           => "iload"
    case LLOAD           => "lload"
    case FLOAD           => "fload"
    case DLOAD           => "dload"
    case ALOAD           => "aload"
    case ILOAD_0         => "iload_0"
    case ILOAD_1         => "iload_1"
    case ILOAD_2         => "iload_2"
    case ILOAD_3         => "iload_3"
    case LLOAD_0         => "lload_0"
    case LLOAD_1         => "lload_1"
    case LLOAD_2         => "lload_2"
    case LLOAD_3         => "lload_3"
    case FLOAD_0         => "fload_0"
    case FLOAD_1         => "fload_1"
    case FLOAD_2         => "fload_2"
    case FLOAD_3         => "fload_3"
    case DLOAD_0         => "dload_0"
    case DLOAD_1         => "dload_1"
    case DLOAD_2         => "dload_2"
    case DLOAD_3         => "dload_3"
    case ALOAD_0         => "aload_0"
    case ALOAD_1         => "aload_1"
    case ALOAD_2         => "aload_2"
    case ALOAD_3         => "aload_3"
    case IALOAD          => "iaload"
    case LALOAD          => "laload"
    case FALOAD          => "faload"
    case DALOAD          => "daload"
    case AALOAD          => "aaload"
    case BALOAD          => "baload"
    case CALOAD          => "caload"
    case SALOAD          => "saload"
    case ISTORE          => "istore"
    case LSTORE          => "lstore"
    case FSTORE          => "fstore"
    case DSTORE          => "dstore"
    case ASTORE          => "astore"
    case ISTORE_0        => "istore_0"
    case ISTORE_1        => "istore_1"
    case ISTORE_2        => "istore_2"
    case ISTORE_3        => "istore_3"
    case LSTORE_0        => "lstore_0"
    case LSTORE_1        => "lstore_1"
    case LSTORE_2        => "lstore_2"
    case LSTORE_3        => "lstore_3"
    case FSTORE_0        => "fstore_0"
    case FSTORE_1        => "fstore_1"
    case FSTORE_2        => "fstore_2"
    case FSTORE_3        => "fstore_3"
    case DSTORE_0        => "dstore_0"
    case DSTORE_1        => "dstore_1"
    case DSTORE_2        => "dstore_2"
    case DSTORE_3        => "dstore_3"
    case ASTORE_0        => "astore_0"
    case ASTORE_1        => "astore_1"
    case ASTORE_2        => "astore_2"
    case ASTORE_3        => "astore_3"
    case IASTORE         => "iastore"
    case LASTORE         => "lastore"
    case FASTORE         => "fastore"
    case DASTORE         => "dastore"
    case AASTORE         => "aastore"
    case BASTORE         => "bastore"
    case CASTORE         => "castore"
    case SASTORE         => "sastore"
    case POP             => "pop"
    case POP2            => "pop2"
    case DUP             => "dup"
    case DUP_X1          => "dup_x1"
    case DUP_X2          => "dup_x2"
    case DUP2            => "dup2"
    case DUP2_X1         => "dup2_x1"
    case DUP2_X2         => "dup2_x2"
    case SWAP            => "swap"
    case IADD            => "iadd"
    case LADD            => "ladd"
    case FADD            => "fadd"
    case DADD            => "dadd"
    case ISUB            => "isub"
    case LSUB            => "lsub"
    case FSUB            => "fsub"
    case DSUB            => "dsub"
    case IMUL            => "imul"
    case LMUL            => "lmul"
    case FMUL            => "fmul"
    case DMUL            => "dmul"
    case IDIV            => "idiv"
    case LDIV            => "ldiv"
    case FDIV            => "fdiv"
    case DDIV            => "ddiv"
    case IREM            => "irem"
    case LREM            => "lrem"
    case FREM            => "frem"
    case DREM            => "drem"
    case INEG            => "ineg"
    case LNEG            => "lneg"
    case FNEG            => "fneg"
    case DNEG            => "dneg"
    case ISHL            => "ishl"
    case LSHL            => "lshl"
    case ISHR            => "ishr"
    case LSHR            => "lshr"
    case IUSHR           => "iushr"
    case LUSHR           => "lushr"
    case IAND            => "iand"
    case LAND            => "land"
    case IOR             => "ior"
    case LOR             => "lor"
    case IXOR            => "ixor"
    case LXOR            => "lxor"
    case IINC            => "iinc"
    case I2L             => "i2l"
    case I2F             => "i2f"
    case I2D             => "i2d"
    case L2I             => "l2i"
    case L2F             => "l2f"
    case L2D             => "l2d"
    case F2I             => "f2i"
    case F2L             => "f2l"
    case F2D             => "f2d"
    case D2I             => "d2i"
    case D2L             => "d2l"
    case D2F             => "d2f"
    case I2B             => "i2b"
    case I2C             => "i2c"
    case I2S             => "i2s"
    case LCMP            => "lcmp"
    case FCMPL           => "fcmpl"
    case FCMPG           => "fcmpg"
    case DCMPL           => "dcmpl"
    case DCMPG           => "dcmpg"
    case IFEQ            => "ifeq"
    case IFNE            => "ifne"
    case IFLT            => "iflt"
    case IFGE            => "ifge"
    case IFGT            => "ifgt"
    case IFLE            => "ifle"
    case IF_ICMPEQ       => "if_icmpeq"
    case IF_ICMPNE       => "if_icmpne"
    case IF_ICMPLT       => "if_icmplt"
    case IF_ICMPGE       => "if_icmpge"
    case IF_ICMPGT       => "if_icmpgt"
    case IF_ICMPLE       => "if_icmple"
    case IF_ACMPEQ       => "if_acmpeq"
    case IF_ACMPNE       => "if_acmpne"
    case GOTO            => "goto"
    case JSR             => "jsr"
    case RET             => "ret"
    case TABLESWITCH     => "tableswitch"
    case LOOKUPSWITCH    => "lookupswitch"
    case IRETURN         => "ireturn"
    case LRETURN         => "lreturn"
    case FRETURN         => "freturn"
    case DRETURN         => "dreturn"
    case ARETURN         => "areturn"
    case RETURN          => "return"
    case GETSTATIC       => "getstatic"
    case PUTSTATIC       => "putstatic"
    case GETFIELD        => "getfield"
    case PUTFIELD        => "putfield"
    case INVOKEVIRTUAL   => "invokevirtual"
    case INVOKESPECIAL   => "invokespecial"
    case INVOKESTATIC    => "invokestatic"
    case INVOKEINTERFACE => "invokeinterface"
    case INVOKEDYNAMIC   => "invokedynamic"
    case NEW             => "new"
    case NEWARRAY        => "newarray"
    case ANEWARRAY       => "anewarray"
    case ARRAYLENGTH     => "arraylength"
    case ATHROW          => "athrow"
    case CHECKCAST       => "checkcast"
    case INSTANCEOF      => "instanceof"
    case MONITORENTER    => "monitorenter"
    case MONITOREXIT     => "monitorexit"
    case WIDE            => "wide"
    case MULTIANEWARRAY  => "multianewarray"
    case IFNULL          => "ifnull"
    case IFNONNULL       => "ifnonnull"
    case GOTO_W          => "goto_w"
    case JSR_W           => "jsr_w"
    case _               => abort(s"Unknown opcode: $code")
  }

  // special instructions
  // b[Constants.IINC] = IINC_INSN;
  // b[Constants.TABLESWITCH] = TABL_INSN;
  // b[Constants.LOOKUPSWITCH] = LOOK_INSN;
  // b[Constants.MULTIANEWARRAY] = MANA_INSN;
  // b[196] = WIDE_INSN; // WIDE
  val instructionTypes: Array[Char] = (
         "AAAAAAAAAAAAAAAABCLMMDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADD"
    + "DDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
    + "AAAAAAAAAAAAAAAAANAAAAAAAAAAAAAAAAAAAAJJJJJJJJJJJJJJJJDOPAA"
    + "AAAAGGGGGGGHIFBFAAFFAARQJJKKJJJJJJJJJJJJJJJJJJ"
  ).toCharArray.mapInPlace(_ - 'A' toChar)

  def opcodeType(code: Int) = instructionTypes(code)

  def opcodeWidth(code: Int) = instructionTypes(code) match {
    case NOARG_INSN       => 0
    case SBYTE_INSN       => 1
    case SHORT_INSN       => 2
    case VAR_INSN         => 1
    case IMPLVAR_INSN     => 0
    case TYPE_INSN        => 2
    case FIELDORMETH_INSN => 2
    case ITFMETH_INSN     => 4
    case INDYMETH_INSN    => 4
    case LABEL_INSN       => 2
    case LABELW_INSN      => 4
    case LDC_INSN         => 1
    case LDCW_INSN        => 2
    case IINC_INSN        => 2
    case x                => abort(s"Not a fixed width instruction: $x")
    // case _                => -1 // not fixed width instruction
    // case TABL_INSN        => -1
    // case LOOK_INSN        => -1
    // case MANA_INSN        => -1
    // case WIDE_INSN        => -1
  }
}

object JvmOpcodes extends JvmOpcodes { }

// abstract class Instruction {
//   def opcode: Int
//   def name = opcodeName(opcode)
// }
// class NoArg(val opcode: Int) extends Instruction
// class SignedByte(val opcode: Int, val arg: Byte) extends Instruction          // BIPUSH, NEWARRAY
// class SignedShort(val opcode: Int, val arg: Short) extends Instruction        // SIPUSH
// class LocalVar(val opcode: Int, val index: Int) extends Instruction           //
// class ImplicitLocalVar(val opcode: Int) extends Instruction                   // ILOAD_0 to ALOAD_3, ISTORE_0 to ASTORE_3
// class TypeOp(val opcode: Int, val index: Int) extends Instruction             // NEW, ANEWARRAY, CHECKCAST, INSTANCEOF
// class FieldOp(val opcode: Int, val index: Int) extends Instruction            // PUTFIELD/GETFIELD, PUTSTATIC/GETSTATIC
// class JumpOp(val opcode: Int, val branchOffset: Short) extends Instruction          //
// class WideJumpOp(val opcode: Int, val branchOffset: Int) extends Instruction        //
// class TableSwitch(default: Int, start: Int, offsets: Array[Int]) extends Instruction
// class LookupSwitch(default: Int, offsets: Array[Int], labels: Array[Int]) extends Instruction
// class ConstantOp(offset: UByte) extends Instruction
// final val NOARG_INSN       = new InstructionType(0, 0)
// final val SBYTE_INSN       = new InstructionType(1, 1)
// final val SHORT_INSN       = new InstructionType(2, 2)
// final val VAR_INSN         = new InstructionType(3, 1)
// final val IMPLVAR_INSN     = new InstructionType(4, 0)
// final val TYPE_INSN        = new InstructionType(5, 2)
// final val FIELDORMETH_INSN = new InstructionType(6, 2)
// final val ITFMETH_INSN     = new InstructionType(7, 4)
// final val INDYMETH_INSN    = new InstructionType(8, 4)
// final val LABEL_INSN       = new InstructionType(9, 2)
// final val LABELW_INSN      = new InstructionType(10, 4)
// final val LDC_INSN         = new InstructionType(11, 1)
// final val LDCW_INSN        = new InstructionType(12, 2)
// final val IINC_INSN        = new InstructionType(13, 2)
// final val TABL_INSN        = new InstructionType(14, -1)
// final val LOOK_INSN        = new InstructionType(15, -1)
// final val MANA_INSN        = new InstructionType(16, -1)      // MULTIANEWARRAY
// final val WIDE_INSN        = new InstructionType(17, 3)
// final val WIDE_IINC        = new InstructionType(18, 5)
